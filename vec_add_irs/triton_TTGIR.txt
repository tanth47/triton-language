#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/tantrinh/workspace/triton-language/vector_addition.py":7:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "hip:gfx942", "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/tantrinh/workspace/triton-language/vector_addition.py":7:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/tantrinh/workspace/triton-language/vector_addition.py":7:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/tantrinh/workspace/triton-language/vector_addition.py":7:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1024xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1024> : tensor<1024xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_0 : tensor<1024xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.addptr %6, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %8 = tt.load %7, %5, %cst : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.addptr %9, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %11 = tt.load %10, %5, %cst : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %12 = arith.addf %8, %11 : tensor<1024xf32, #blocked> loc(#loc11)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %14 = tt.addptr %13, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %14, %12, %5 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/tantrinh/workspace/triton-language/vector_addition.py":12:29)
#loc3 = loc("/home/tantrinh/workspace/triton-language/vector_addition.py":13:25)
#loc4 = loc("/home/tantrinh/workspace/triton-language/vector_addition.py":13:51)
#loc5 = loc("/home/tantrinh/workspace/triton-language/vector_addition.py":13:38)
#loc6 = loc("/home/tantrinh/workspace/triton-language/vector_addition.py":14:21)
#loc7 = loc("/home/tantrinh/workspace/triton-language/vector_addition.py":15:24)
#loc8 = loc("/home/tantrinh/workspace/triton-language/vector_addition.py":15:16)
#loc9 = loc("/home/tantrinh/workspace/triton-language/vector_addition.py":16:24)
#loc10 = loc("/home/tantrinh/workspace/triton-language/vector_addition.py":16:16)
#loc11 = loc("/home/tantrinh/workspace/triton-language/vector_addition.py":18:12)
#loc12 = loc("/home/tantrinh/workspace/triton-language/vector_addition.py":20:21)
#loc13 = loc("/home/tantrinh/workspace/triton-language/vector_addition.py":20:30)
#loc14 = loc("/home/tantrinh/workspace/triton-language/vector_addition.py":20:4)

